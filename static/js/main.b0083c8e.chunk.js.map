{"version":3,"sources":["components/stockTable.js","App.js","serviceWorker.js","index.js"],"names":["StockTable","_ref","stocks","react_default","a","createElement","className","Object","keys","map","item","index","key","toUpperCase","style","backgroundColor","color","price","width","timeago_react_default","datetime","time","build","data","priceHistory","height","limit","fill","websocket","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openWebSocket","WebSocket","onmessage","evt","onMessage","onerror","onError","setState","isSocketError","console","log","state","JSON","parse","forEach","element","push","parseFloat","toFixed","Date","now","_this$state","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0083c8e.chunk.js","sourcesContent":["import React from 'react'\nimport TimeAgo from 'timeago-react';\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\n\nexport default function StockTable({ stocks }) {\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th>Ticker</th>\n                    <th>Price</th>\n                    <th>Last Update</th>\n                    <th>Price Graph</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    Object.keys(stocks).map((item, index) => {\n                        return (\n                            <tr key={index}>\n                                <td>{item.toUpperCase()}</td>\n                                <td style={{ backgroundColor: stocks[item].color }}>{stocks[item].price}</td>\n                                <td style={{ width: \"150px\" }}>\n                                    <TimeAgo\n                                        datetime={stocks[item].time}\n                                    />\n                                </td>\n                                <td>\n                                    <Sparklines data={stocks[item].priceHistory} width={100} height={20} limit={20}>\n                                        <SparklinesLine color=\"#56b45d\" style={{ fill: \"#56b45d\" }} />\n                                    </Sparklines>\n                                </td>\n                            </tr>\n                        )\n                    })}\n            </tbody>\n        </table>\n    )\n}","import React, { Component } from 'react';\nimport StockTable from './components/stockTable';\nimport './App.css';\n\nlet websocket;\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      stocks: {},\n      isSocketError:false\n    }\n  }\n  componentWillMount() {\n    this.openWebSocket();\n  }\n  openWebSocket = () => {\n    websocket = new WebSocket('ws://stocks.mnet.website');\n    websocket.onmessage = (evt) => { this.onMessage(evt) };\n    websocket.onerror = (evt) => { this.onError(evt) };\n  }\n  onError = (evt) => {\n    this.setState({isSocketError:true});\n    console.log('errr' + evt);\n  }\n  onMessage = ({ data }) => {\n    let { stocks } = this.state;\n    let stk = JSON.parse(data)\n    stk.forEach(element => {\n      let color = '';\n      let priceHistory = [];\n      if (stocks[element[0]]) {\n        color = element[1] - stocks[element[0]].price > 0 ? 'green' : 'red';\n        stocks[element[0]].priceHistory.push(element[1]);\n        priceHistory = stocks[element[0]].priceHistory;\n      } else {\n        color = 'white';\n        priceHistory = [element[1]];\n      }\n      stocks[element[0]] = { price: parseFloat(element[1]).toFixed(2), color, time: Date.now(), priceHistory }\n    });\n    this.setState({ stocks,isSocketError:false })\n  }\n  render() {\n    const { stocks,isSocketError } = this.state\n    return (\n      <React.Fragment>\n        <div className=\"topnav\">\n          <span>Live Stocks App </span>\n        </div>\n        <div className=\"container\">\n        {isSocketError && <h2 className=\"socket-error\">Can't connect to server,try after some time</h2>}\n        {!isSocketError && <StockTable stocks={stocks}/>}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}